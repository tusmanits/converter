        {{ 
            config(
                materialized='view',
                ) 
        }}

        --these need to change by converter

        {{ config(schema = "sigma_its_sig") }}
        {{ config(alias = "inventory_items") }}


         SELECT ID, COST, PRODUCT_ID, (CASE WHEN sold_at is not null THEN TRUE ELSE FALSE END) AS IS_SOLD, DATEDIFF('day', created_at, coalesce(sold_at,CURRENT_DATE)) AS DAYS_IN_INVENTORY, DATEDIFF('day', created_at, coalesce(sold_at,CURRENT_DATE)) AS DAYS_IN_INVENTORY_TIER, DATEDIFF('day', TO_CHAR(TO_DATE(created_at), 'YYYY-MM-DD'), CURRENT_DATE) AS DAYS_SINCE_ARRIVAL, DATEDIFF('day', TO_CHAR(TO_DATE(created_at), 'YYYY-MM-DD'), CURRENT_DATE) AS DAYS_SINCE_ARRIVAL_TIER, PRODUCT_DISTRIBUTION_CENTER_ID, CASE WHEN created_at IS NOT NULL THEN 'YES' ELSE 'NO' END AS CREATED_YESNO, created_at AS CREATED_RAW, TO_CHAR(DATE_TRUNC('second',created_at), 'YYYY-MM-DD HH24:MI:SS') AS CREATED_TIME, TO_CHAR(created_at , 'HH24:MI') AS CREATED_TIME_OF_DAY, TO_CHAR(DATE_TRUNC('hour', created_at ), 'YYYY-MM-DD HH24') AS CREATED_HOUR, CAST(EXTRACT(HOUR FROM CAST(created_at AS TIMESTAMP)) AS INT) AS CREATED_HOUR_OF_DAY, TO_CHAR(DATE_TRUNC('hour', DATE_TRUNC('hour', DATEADD('HOURS', -1 * (CAST(DATE_PART('HOUR', CAST(created_at AS TIMESTAMP)) AS INT) % 2), created_at ))), 'YYYY-MM-DD HH24') AS CREATED_HOUR2, TO_CHAR(DATE_TRUNC('hour', DATE_TRUNC('hour', DATEADD('HOURS', -1 * (CAST(DATE_PART('HOUR', CAST(created_at AS TIMESTAMP)) AS INT) % 3), created_at ))), 'YYYY-MM-DD HH24') AS CREATED_HOUR3, TO_CHAR(DATE_TRUNC('minute', created_at ), 'YYYY-MM-DD HH24:MI') AS CREATED_MINUTE, TO_CHAR(DATE_TRUNC('minute', DATE_TRUNC('minute', TO_TIMESTAMP((EXTRACT('EPOCH', CAST(created_at AS TIMESTAMP_TZ)) - (EXTRACT('EPOCH', CAST(created_at AS TIMESTAMP_TZ)) % (60*10)))))), 'YYYY-MM-DD HH24:MI') AS CREATED_MINUTE10, TO_CHAR(DATE_TRUNC('second', created_at ), 'YYYY-MM-DD HH24:MI:SS') AS CREATED_SECOND, LEFT(TO_CHAR(created_at , 'YYYY-MM-DD HH24:MI:SS.FF'), 23) AS CREATED_MILLISECOND, LEFT(TO_CHAR(TO_TIMESTAMP(LEFT(TO_CHAR(DATEADD('NANOSECOND', -1 * (CAST(DATE_PART('NANOSECOND', CAST(created_at AS TIMESTAMP)) AS INT) % (10 * 1000000)), created_at ), 'YYYY-MM-DD HH24:MI:SS.FF'), 23)), 'YYYY-MM-DD HH24:MI:SS.FF'), 23) AS CREATED_MILLISECOND10, LEFT(TO_CHAR(created_at , 'YYYY-MM-DD HH24:MI:SS.FF'), 26) AS CREATED_MICROSECOND, TO_CHAR(TO_DATE(created_at), 'YYYY-MM-DD') AS CREATED_DATE, TO_CHAR(DATE_TRUNC('week', created_at ), 'YYYY-MM-DD') AS CREATED_WEEK, CASE TO_CHAR(created_at , 'DY') WHEN 'Tue' THEN 'Tuesday' WHEN 'Wed' THEN 'Wednesday' WHEN 'Thu' THEN 'Thursday' WHEN 'Sat' THEN 'Saturday' ELSE TO_CHAR(created_at , 'DY') || 'day' END AS CREATED_DAY_OF_WEEK, MOD(EXTRACT(DOW FROM created_at )::integer - 1 + 7, 7) AS CREATED_DAY_OF_WEEK_INDEX, TO_CHAR(DATE_TRUNC('month',created_at), 'YYYY-MM') AS CREATED_MONTH, EXTRACT(MONTH FROM created_at )::integer AS CREATED_MONTH_NUM, EXTRACT(MONTH FROM created_at )::integer AS CREATED_FISCAL_MONTH_NUM, DECODE(EXTRACT('month', created_at ), 1, 'January', 2, 'February', 3, 'March', 4, 'April', 5, 'May', 6, 'June', 7, 'July', 8, 'August', 9, 'September', 10, 'October', 11, 'November', 12, 'December') AS CREATED_MONTH_NAME, EXTRACT(DAY FROM created_at )::integer AS CREATED_DAY_OF_MONTH, TO_CHAR(DATE_TRUNC('month', CAST(DATE_TRUNC('quarter', created_at ) AS DATE)), 'YYYY-MM') AS CREATED_QUARTER, TO_CHAR(DATE_TRUNC('month', CAST(DATE_TRUNC('quarter', created_at ) AS DATE)), 'YYYY-MM') AS CREATED_FISCAL_QUARTER, (CAST('Q' AS VARCHAR) || CAST(CEIL(EXTRACT(MONTH FROM created_at )::integer / 3) AS VARCHAR)) AS CREATED_QUARTER_OF_YEAR, (CAST('Q' AS VARCHAR) || CAST(CEIL(EXTRACT(MONTH FROM created_at )::integer / 3) AS VARCHAR)) AS CREATED_FISCAL_QUARTER_OF_YEAR, (CAST('Q' AS VARCHAR) || CAST(CEIL(EXTRACT(MONTH FROM created_at )::integer / 3) AS VARCHAR)) AS CREATED_YEAR, EXTRACT(YEAR FROM created_at )::integer AS CREATED_FISCAL_YEAR, EXTRACT(DOY FROM created_at )::integer AS CREATED_DAY_OF_YEAR, EXTRACT(WEEK FROM created_at )::int AS CREATED_WEEK_OF_YEAR, TO_CHAR(DATE_TRUNC('second',sold_at), 'YYYY-MM-DD HH24:MI:SS') AS SOLD_TIME, TO_CHAR(TO_DATE(sold_at), 'YYYY-MM-DD') AS SOLD_DATE, TO_CHAR(DATE_TRUNC('week', sold_at ), 'YYYY-MM-DD') AS SOLD_WEEK, TO_CHAR(DATE_TRUNC('month',sold_at), 'YYYY-MM') AS SOLD_MONTH, sold_at AS SOLD_RAW FROM PUBLIC.inventory_items 